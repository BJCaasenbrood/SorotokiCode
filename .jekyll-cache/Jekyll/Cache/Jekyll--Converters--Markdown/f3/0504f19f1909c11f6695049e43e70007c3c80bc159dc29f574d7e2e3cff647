I"¹g<h1 class="no_toc" id="user-guide">User guide</h1>

<details open="">
  <summary class="text-delta">
    Table of contents
  </summary>
<ol id="markdown-toc">
  <li><a href="#sorotoki-architecture" id="markdown-toc-sorotoki-architecture">SOROTOKI architecture</a></li>
  <li><a href="#useful-commands-within-sorotoki" id="markdown-toc-useful-commands-within-sorotoki">Useful commands within SOROTOKI</a></li>
  <li><a href="#signed-distance-functions---sdfm" id="markdown-toc-signed-distance-functions---sdfm">Signed Distance Functions  â€“ <code class="language-plaintext text-purple-000 highlighter-rouge">Sdf.m</code></a>    <ol>
      <li><a href="#two-dimensional-presets" id="markdown-toc-two-dimensional-presets">Two-dimensional presets</a></li>
      <li><a href="#three-dimensional-presets" id="markdown-toc-three-dimensional-presets">Three-dimensional presets</a></li>
    </ol>
  </li>
  <li><a href="#mesh-generation--meshm" id="markdown-toc-mesh-generation--meshm">Mesh generation â€“ <code class="language-plaintext text-purple-000 highlighter-rouge">Mesh.m</code></a>    <ol>
      <li><a href="#public-variables" id="markdown-toc-public-variables">Public variables</a></li>
    </ol>
  </li>
  <li><a href="#finite-element-method--femm" id="markdown-toc-finite-element-method--femm">Finite element method â€“ <code class="language-plaintext text-purple-000 highlighter-rouge">Fem.m</code></a>    <ol>
      <li><a href="#nodeedge-selection" id="markdown-toc-nodeedge-selection">Node/Edge selection</a></li>
      <li><a href="#hyper-elastic-material-presets" id="markdown-toc-hyper-elastic-material-presets">Hyper-elastic material presets</a></li>
    </ol>
  </li>
  <li><a href="#dynamic-modeling--modelm" id="markdown-toc-dynamic-modeling--modelm">Dynamic Modeling â€“ <code class="language-plaintext text-purple-000 highlighter-rouge">Model.m</code></a></li>
  <li><a href="#graphical-models--gmodelm" id="markdown-toc-graphical-models--gmodelm">Graphical models â€“ <code class="language-plaintext text-purple-000 highlighter-rouge">Gmodel.m</code></a>    <ol>
      <li><a href="#graphical-material-presets" id="markdown-toc-graphical-material-presets">Graphical material presets</a></li>
    </ol>
  </li>
  <li><a href="#ik-rigging--rigm" id="markdown-toc-ik-rigging--rigm">IK-rigging â€“ <code class="language-plaintext text-purple-000 highlighter-rouge">Rig.m</code></a></li>
  <li><a href="#plotting-tools" id="markdown-toc-plotting-tools">Plotting tools</a></li>
</ol>

</details>

<hr />

<h1 id="sorotoki-architecture">SOROTOKI architecture</h1>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiY2xhc3NEaWFncmFtXG5jbGFzcyBTZGYge1xuPDxzaWduZWQgZGlzdGFuY2UgZnVuY3Rpb24-PlxuZXZhbCgpXG5zaG93KClcbn1cbiUlLVxuY2xhc3MgTWVzaCB7XG48PG1lc2ggZ2VuZXJhdGlvbj4-XG5CbGVuZGVyXG5nZW5lcmF0ZSgpXG59XG4lJS1cbmNsYXNzIEdtb2RlbCB7XG48PGdyYXBoaWNhbCBtb2RlbHM-PlxuTWF0ZXJpYWxcbnJlbmRlcigpXG5iYWtlKClcbnVwZGF0ZSgpXG59XG4lJS1cbmNsYXNzIEZlbSB7XG48PGZpbml0ZSBlbGVtZW50ICYgdG9wb2xvZ3kgb3B0aW1pemF0aW9uPj5cbk1hdGVyaWFsXG5zb2x2ZSgpXG5vcHRpbWl6ZSgpXG59XG4lJS1cbmNsYXNzIE1vZGVsIHtcbjw8Q29zc2VyYXQtYmVhbSBtb2RlbHM-PlxuUmlnXG5TaGFwZXNcbmJ1aWxkKClcbnNpbXVsYXRlKClcbn1cbiUlLVxuY2xhc3MgQmRvZyB7XG48PFJlYWwtdGltZSBpbnRlcmZhY2UgdmlhIEJhbGxvb25kb2c-PlxuU2V0UG9pbnRcbmNvbm5lY3QoKVxuZXhlY3V0ZSgpXG5zaGVsbCgpXG5jbG9zZSgpXG59XG4lJS1cblNkZiAtLT4gTWVzaCA6IE1lc2hpbmcgZG9tYWluXG5TZGYgLi4-IEdtb2RlbCA6IEltcGxpY2l0IG1vZGVsaW5nXG5NZXNoIC4uPiBHbW9kZWxcbkdtb2RlbCAuLj4gTW9kZWwgOiBSZW5kZXJpbmdcbiUlLVxuTWVzaCAtLT4gRmVtIDogSW1wb3J0XG5GZW0gLS0-IE1lc2ggIDogRXhwb3J0IHRvcG9sb2d5XG5GZW0gLi4-IE1vZGVsIDogRkVNLWRyaXZlbiBkYXRhXG5Nb2RlbCAuLj4gQmRvZyA6IE1vZGVsLWJhc2VkIGNvbnRyb2xcbkZlbSAuLj4gQmRvZyA6IEZFTS1iYXNlZCBJSy1jb250cm9sXG4lJS0iLCJtZXJtYWlkIjpudWxsfQ" /></p>

<h1 id="useful-commands-within-sorotoki">Useful commands within SOROTOKI</h1>
<div class="code-example">
  <h2 class="no_toc" id="sorotokivarargin"><code class="language-plaintext fs-6 text-purple-000 text-alpha highlighter-rouge">sorotoki(varargin)</code></h2>
  <ul>
    <li><code class="language-plaintext text-red-000 highlighter-rouge">Function</code> â€“ Calls the SOROTOKI installation manager.
      <ul>
        <li><code class="language-plaintext text-blue-000 highlighter-rouge">varargin</code> â€“ <code class="language-plaintext highlighter-rouge">(empty)</code>, <code class="language-plaintext highlighter-rouge">'check'</code>, <code class="language-plaintext highlighter-rouge">'update'</code>, <code class="language-plaintext highlighter-rouge">'demo'</code>, <code class="language-plaintext highlighter-rouge">'update'</code>.</li>
      </ul>
    </li>
  </ul>

  <div class="language-matlab highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span> <span class="n">USAGE</span>
<span class="n">sorotoki</span><span class="p">();</span>		<span class="c1">% calls the installer</span>
<span class="n">sorotoki</span><span class="p">(</span><span class="s1">'check'</span><span class="p">);</span>	<span class="c1">% performs complete check of toolkit</span>
<span class="n">sorotoki</span><span class="p">(</span><span class="s1">'update'</span><span class="p">);</span>	<span class="c1">% updates SOROTOKI to newest version</span>
<span class="n">sorotoki</span><span class="p">(</span><span class="s1">'unload'</span><span class="p">);</span>	<span class="c1">% removes toolkit from search path</span>
<span class="n">sorotoki</span><span class="p">(</span><span class="s1">'demo'</span><span class="p">);</span>	<span class="c1">% provides a list of demos</span>
</code></pre></div>  </div>
</div>

<div class="code-example">
  <h2 class="no_toc" id="clr"><code class="language-plaintext fs-6 text-purple-000 text-alpha highlighter-rouge">clr()</code></h2>
  <ul>
    <li><code class="language-plaintext text-red-000 highlighter-rouge">Function</code> â€“  Performs <code class="language-plaintext highlighter-rouge">clc</code>, <code class="language-plaintext highlighter-rouge">clear all</code>, and  <code class="language-plaintext highlighter-rouge">close all</code> in one call.</li>
  </ul>
</div>

<div class="code-example">
  <h2 class="no_toc" id="cdsoro"><code class="language-plaintext fs-6 text-purple-000 text-alpha highlighter-rouge">cdsoro()</code></h2>
  <ul>
    <li><code class="language-plaintext text-red-000 highlighter-rouge">Function</code> â€“  Sets current directory to the installation folder of SOROTOKI.</li>
  </ul>
</div>

<div class="code-example">
  <h2 class="no_toc" id="add2path"><code class="language-plaintext fs-6 text-purple-000 text-alpha highlighter-rouge">add2path()</code></h2>
  <ul>
    <li><code class="language-plaintext text-red-000 highlighter-rouge">Function</code> â€“  Adds current directory to MATLABâ€™s search path.</li>
  </ul>
</div>

<div class="code-example">
  <h2 class="no_toc" id="unloadsorotoki"><code class="language-plaintext fs-6 text-purple-000 text-alpha highlighter-rouge">unload_sorotoki</code></h2>
  <ul>
    <li><code class="language-plaintext text-red-000 highlighter-rouge">Function</code> â€“  Removes the entire SOROTOKI toolkit from MATLABâ€™s search path. <strong>NOTICE:</strong> This does not uninstall SOROTOKI, it prevents MATLAB from finding all functions tied to the toolkit. If MATLAB restarts, the <code class="language-plaintext highlighter-rouge">startup.m</code> will load SOROTOKI normally.</li>
  </ul>
</div>

<hr />

<h1 id="signed-distance-functions---sdfm">Signed Distance Functions  â€“ <code class="language-plaintext text-purple-000 highlighter-rouge">Sdf.m</code></h1>

<div class="code-example">
  <h2 class="no_toc" id="sdf--sdffnc"><code class="language-plaintext fs-6 text-purple-000 text-alpha highlighter-rouge">sdf = Sdf(fnc)</code></h2>
  <ul>
    <li><code class="language-plaintext text-red-000 highlighter-rouge">Class::Sdf</code> â€“  Creates a Signed Distance Function Class from the input function <code class="language-plaintext highlighter-rouge">fnc = @(x) ....</code>
      <ul>
        <li><code class="language-plaintext text-blue-000 highlighter-rouge">fnc</code> â€“ <code class="language-plaintext text-red-000 highlighter-rouge">Function::f = @(x) ...</code> such that <code class="language-plaintext highlighter-rouge">d = f([Nx2 Matrix])</code> or <code class="language-plaintext highlighter-rouge">d = f([Nx3 Matrix])</code> gives the output <code class="language-plaintext highlighter-rouge">d = [Nx1 Column]</code> of signed distances (negative implies inside the domain). The simplest example is <code class="language-plaintext highlighter-rouge">sdf = @(x) sqrt((x(:,1)).^2 + (x(:,2)).^2) - 1.0</code> which results in a unit-circle about the origin (0,0).</li>
      </ul>
    </li>
    <li><code class="language-plaintext text-red-000 highlighter-rouge">Public variables</code>
      <ul>
        <li><code class="language-plaintext text-blue-000 highlighter-rouge">sdf</code> â€“ <code class="language-plaintext text-red-000 highlighter-rouge">Function::sdf = @(x) ...</code>,</li>
        <li><code class="language-plaintext text-blue-000 highlighter-rouge">BdBox</code> â€“ <code class="language-plaintext highlighter-rouge">[1x4 Row]</code>, <code class="language-plaintext highlighter-rouge">[1x6 Row]</code>,</li>
        <li><code class="language-plaintext text-blue-000 highlighter-rouge">cmap</code> â€“ <code class="language-plaintext highlighter-rouge">viridis</code> (default), or <code class="language-plaintext highlighter-rouge">[Nx3 ColorMatrix]</code>.</li>
      </ul>
    </li>
  </ul>

  <div class="language-matlab highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span> <span class="n">USAGE</span>
<span class="n">fnc</span> <span class="o">=</span> <span class="o">@</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="nb">sqrt</span><span class="p">((</span><span class="n">x</span><span class="p">(:,</span><span class="mi">1</span><span class="p">))</span><span class="o">.^</span><span class="mi">2</span> <span class="o">+</span> <span class="p">(</span><span class="n">x</span><span class="p">(:,</span><span class="mi">2</span><span class="p">))</span><span class="o">.^</span><span class="mi">2</span><span class="p">)</span> <span class="o">-</span> <span class="mf">1.0</span><span class="p">;</span>
<span class="n">sdf</span> <span class="o">=</span> <span class="n">Sdf</span><span class="p">(</span><span class="n">fnc</span><span class="p">,</span><span class="s1">'BdBox'</span><span class="p">,[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]);</span>
</code></pre></div>  </div>
</div>

<div class="code-example">
  <h2 class="no_toc" id="sdf--sdf1--sdf2----sdfn"><code class="language-plaintext fs-6 text-purple-000 text-alpha highlighter-rouge">Sdf = Sdf1 + Sdf2 + ... + Sdfn</code></h2>
  <ul>
    <li><code class="language-plaintext text-red-000 highlighter-rouge">Class operator</code> â€“  Unions two or more Sdf classes.
      <ul>
        <li><code class="language-plaintext text-blue-000 highlighter-rouge">Sdf1,Sdf2,...</code> â€“ <code class="language-plaintext text-red-000 highlighter-rouge">Class::Sdf</code></li>
        <li><code class="language-plaintext text-blue-000 highlighter-rouge">Sdf</code> â€“ <code class="language-plaintext text-red-000 highlighter-rouge">Class::Sdf</code></li>
      </ul>
    </li>
  </ul>
</div>

<div class="code-example">
  <h2 class="no_toc" id="sdf--sdf1---sdf2------sdfn"><code class="language-plaintext fs-6 text-purple-000 text-alpha highlighter-rouge">Sdf = Sdf1 - Sdf2 - ... - Sdfn</code></h2>
  <ul>
    <li><code class="language-plaintext text-red-000 highlighter-rouge">Class operator</code> â€“  Difference between two or more Sdf classes. <code class="language-plaintext highlighter-rouge">Sdf1</code> is the base function on which the operation is performed.
      <ul>
        <li><code class="language-plaintext text-blue-000 highlighter-rouge">Sdf1,Sdf2,...</code> â€“ <code class="language-plaintext text-red-000 highlighter-rouge">Class::Sdf</code></li>
        <li><code class="language-plaintext text-blue-000 highlighter-rouge">Sdf</code> â€“ <code class="language-plaintext text-red-000 highlighter-rouge">Class::Sdf</code></li>
      </ul>
    </li>
  </ul>
</div>

<div class="code-example">
  <h2 class="no_toc" id="sdf--sdf1sdf2"><code class="language-plaintext fs-6 text-purple-000 text-alpha highlighter-rouge">Sdf = Sdf1/Sdf2</code></h2>
  <ul>
    <li><code class="language-plaintext text-red-000 highlighter-rouge">Class operator</code> â€“  Intersection between two Sdf classes. <code class="language-plaintext highlighter-rouge">Sdf1</code> is the base function on which the operation is performed.
      <ul>
        <li><code class="language-plaintext text-blue-000 highlighter-rouge">Sdf1,Sdf2</code> â€“ <code class="language-plaintext text-red-000 highlighter-rouge">Class::Sdf</code></li>
        <li><code class="language-plaintext text-blue-000 highlighter-rouge">Output</code> â€“ <code class="language-plaintext text-red-000 highlighter-rouge">Class::Sdf</code></li>
      </ul>
    </li>
  </ul>
</div>

<div class="code-example">
  <h2 class="no_toc" id="sdfshow"><code class="language-plaintext fs-6 text-purple-000 text-alpha highlighter-rouge">Sdf.show()</code></h2>
  <ul>
    <li><code class="language-plaintext text-red-000 highlighter-rouge">Public function</code> â€“  Creates <code class="language-plaintext highlighter-rouge">figure(101)</code> or uses existing <code class="language-plaintext highlighter-rouge">figure(101)</code> to show the Signed Distance Field within the domain <code class="language-plaintext highlighter-rouge">Sdf.BdBox</code>. The colormap is <code class="language-plaintext highlighter-rouge">viridis</code> by default.</li>
  </ul>
</div>

<h3 id="two-dimensional-presets">Two-dimensional presets</h3>
<div class="code-example">
  <h2 class="no_toc" id="sdf--scirclex0y0r"><code class="language-plaintext fs-6 text-purple-000 text-alpha highlighter-rouge">sdf = sCircle(x0,y0,R)</code></h2>
  <ul>
    <li><code class="language-plaintext text-red-000 highlighter-rouge">Class::Sdf</code> â€“  Creates a circular signed distance function
      <ul>
        <li><code class="language-plaintext text-blue-000 highlighter-rouge">x0</code>,<code class="language-plaintext text-blue-000 highlighter-rouge">y0</code> â€“ <code class="language-plaintext highlighter-rouge">[float]</code>; X and Y coordinate of the origin.</li>
        <li><code class="language-plaintext text-blue-000 highlighter-rouge">R</code> â€“ <code class="language-plaintext highlighter-rouge">[float]</code>; radius of the circle.</li>
      </ul>
    </li>
  </ul>
</div>

<div class="code-example">
  <h2 class="no_toc" id="sdf--srectanglex1x2y1y2"><code class="language-plaintext fs-6 text-purple-000 text-alpha highlighter-rouge">sdf = sRectangle(x1,x2,y1,y2)</code></h2>
  <ul>
    <li><code class="language-plaintext text-red-000 highlighter-rouge">Class::Sdf</code> â€“  Creates a circular signed distance function
      <ul>
        <li><code class="language-plaintext text-blue-000 highlighter-rouge">x1</code>,<code class="language-plaintext text-blue-000 highlighter-rouge">y1</code> â€“ <code class="language-plaintext highlighter-rouge">[float]</code>; X and Y coordinate of left-bottom corner of the rectangle.</li>
        <li><code class="language-plaintext text-blue-000 highlighter-rouge">x2</code>,<code class="language-plaintext text-blue-000 highlighter-rouge">y2</code> â€“ <code class="language-plaintext highlighter-rouge">[float]</code>; X and Y coordinate of right-top corner of the rectangle.</li>
      </ul>
    </li>
  </ul>
</div>

<h3 id="three-dimensional-presets">Three-dimensional presets</h3>
<div class="code-example">
  <h2 class="no_toc" id="sdf--sspherex0y0z0r"><code class="language-plaintext fs-6 text-purple-000 text-alpha highlighter-rouge">sdf = sSphere(x0,y0,z0,R)</code></h2>
  <ul>
    <li><code class="language-plaintext text-red-000 highlighter-rouge">Class::Sdf</code> â€“  Creates a circular signed distance function
      <ul>
        <li><code class="language-plaintext text-blue-000 highlighter-rouge">x0</code>,<code class="language-plaintext text-blue-000 highlighter-rouge">y0</code>,<code class="language-plaintext text-blue-000 highlighter-rouge">z0</code> â€“ <code class="language-plaintext highlighter-rouge">[float]</code>; X,Y, and Z coordinate of the origin.</li>
        <li><code class="language-plaintext text-blue-000 highlighter-rouge">R</code> â€“ <code class="language-plaintext highlighter-rouge">[float]</code>; radius of the sphere.</li>
      </ul>
    </li>
  </ul>
</div>

<div class="code-example">
  <h2 class="no_toc" id="sdf--scubex1x2y1y2"><code class="language-plaintext fs-6 text-purple-000 text-alpha highlighter-rouge">sdf = sCube(x1,x2,y1,y2)</code></h2>
  <ul>
    <li><code class="language-plaintext text-red-000 highlighter-rouge">Class::Sdf</code> â€“  Creates a circular signed distance function
      <ul>
        <li><code class="language-plaintext text-blue-000 highlighter-rouge">x1</code>,<code class="language-plaintext text-blue-000 highlighter-rouge">y1</code> â€“ <code class="language-plaintext highlighter-rouge">[float]</code>; X and Y coordinate of left-bottom corner of the rectangle.</li>
        <li><code class="language-plaintext text-blue-000 highlighter-rouge">x2</code>,<code class="language-plaintext text-blue-000 highlighter-rouge">y2</code> â€“ <code class="language-plaintext highlighter-rouge">[float]</code>; X and Y coordinate of right-top corner of the rectangle.</li>
      </ul>
    </li>
  </ul>
</div>

<hr />

<h1 id="mesh-generation--meshm">Mesh generation â€“ <code class="language-plaintext text-purple-000 highlighter-rouge">Mesh.m</code></h1>

<div class="code-example">
  <h2 class="no_toc" id="msh--meshsdf"><code class="language-plaintext fs-6 text-purple-000 text-alpha highlighter-rouge">msh = Mesh(sdf)</code></h2>
  <ul>
    <li><code class="language-plaintext text-red-000 highlighter-rouge">Constructor::Sdf</code> â€“  Creates a Signed Distance Function Class from the input <code class="language-plaintext highlighter-rouge">fnc = @(x) ....</code>
      <ul>
        <li><code class="language-plaintext text-blue-000 highlighter-rouge">msh</code> â€“ <code class="language-plaintext text-red-000 highlighter-rouge">Class::Mesh = @(x) ...</code> such that <code class="language-plaintext highlighter-rouge">d = f([Nx2 Matrix])</code> or <code class="language-plaintext highlighter-rouge">d = f([Nx3 Matrix])</code> gives the output <code class="language-plaintext highlighter-rouge">d = [Nx1 Column]</code> of signed distances (negative implies inside the domain). The simplest example is <code class="language-plaintext highlighter-rouge">sdf = @(x) sqrt((x(:,1)).^2 + (x(:,2)).^2) - 1.0</code> which results in a unit-circle about the origin (0,0).</li>
      </ul>
    </li>
  </ul>

  <h2 class="no_toc" id="msh--meshnodeelement"><code class="language-plaintext fs-6 text-purple-000 text-alpha highlighter-rouge">msh = Mesh(node,element)</code></h2>
  <ul>
    <li><code class="language-plaintext text-red-000 highlighter-rouge">Constructor::Mesh</code> â€“  Creates a Signed Distance Function Class from the input function <code class="language-plaintext highlighter-rouge">fnc = @(x) ....</code>
      <ul>
        <li><code class="language-plaintext text-blue-000 highlighter-rouge">sdf</code> â€“ <code class="language-plaintext text-red-000 highlighter-rouge">Class::sdf = @(x) ...</code>.</li>
      </ul>
    </li>
  </ul>

  <h2 class="no_toc" id="msh--meshimageboxhmax"><code class="language-plaintext fs-6 text-purple-000 text-alpha highlighter-rouge">msh = Mesh(image,box,hmax)</code></h2>
  <ul>
    <li><code class="language-plaintext text-red-000 highlighter-rouge">Constructor::Sdf</code> â€“  Creates a Signed Distance Function Class from the input function <code class="language-plaintext highlighter-rouge">fnc = @(x) ....</code>
      <ul>
        <li><code class="language-plaintext text-blue-000 highlighter-rouge">sdf</code> â€“ <code class="language-plaintext text-red-000 highlighter-rouge">Class::sdf = @(x) ...</code>.</li>
      </ul>
    </li>
  </ul>

  <h3 class="fs-4 text-purple-000 text-alpha" id="public-variables">Public variables</h3>
  <ul>
    <li><code class="language-plaintext text-blue-000 highlighter-rouge">sdf</code> â€“ <code class="language-plaintext text-red-000 highlighter-rouge">Function::sdf = @(x) ...</code>,</li>
    <li><code class="language-plaintext text-blue-000 highlighter-rouge">BdBox</code> â€“ <code class="language-plaintext highlighter-rouge">[1x4 Row]</code>, <code class="language-plaintext highlighter-rouge">[1x6 Row]</code>,</li>
    <li><code class="language-plaintext text-blue-000 highlighter-rouge">cmap</code> â€“ <code class="language-plaintext highlighter-rouge">viridis</code> (default), or <code class="language-plaintext highlighter-rouge">[Nx3 ColorMatrix]</code>.</li>
  </ul>

  <div class="language-matlab highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span> <span class="n">USAGE</span>
<span class="n">fnc</span> <span class="o">=</span> <span class="o">@</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="nb">sqrt</span><span class="p">((</span><span class="n">x</span><span class="p">(:,</span><span class="mi">1</span><span class="p">))</span><span class="o">.^</span><span class="mi">2</span> <span class="o">+</span> <span class="p">(</span><span class="n">x</span><span class="p">(:,</span><span class="mi">2</span><span class="p">))</span><span class="o">.^</span><span class="mi">2</span><span class="p">)</span> <span class="o">-</span> <span class="mf">1.0</span><span class="p">;</span>
<span class="n">sdf</span> <span class="o">=</span> <span class="n">Sdf</span><span class="p">(</span><span class="n">fnc</span><span class="p">,</span><span class="s1">'BdBox'</span><span class="p">,[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]);</span>
</code></pre></div>  </div>
</div>

<hr />

<h1 id="finite-element-method--femm">Finite element method â€“ <code class="language-plaintext text-purple-000 highlighter-rouge">Fem.m</code></h1>

<div class="code-example">
  <h2 class="no_toc" id="fem--femmsh"><code class="language-plaintext fs-6 text-purple-000 text-alpha highlighter-rouge">fem = Fem(msh)</code></h2>
  <ul>
    <li><code class="language-plaintext text-red-000 highlighter-rouge">Constructor::Fem</code> â€“  Creates a Signed Distance Function Class from the input function <code class="language-plaintext highlighter-rouge">fnc = @(x) ....</code>
      <ul>
        <li><code class="language-plaintext text-blue-000 highlighter-rouge">msh</code> â€“ <code class="language-plaintext text-red-000 highlighter-rouge">Class::Mesh = @(x) ...</code> such that <code class="language-plaintext highlighter-rouge">d = f([Nx2 Matrix])</code> or <code class="language-plaintext highlighter-rouge">d = f([Nx3 Matrix])</code> gives the output <code class="language-plaintext highlighter-rouge">d = [Nx1 Column]</code> of signed distances (negative implies inside the domain). The simplest example is <code class="language-plaintext highlighter-rouge">sdf = @(x) sqrt((x(:,1)).^2 + (x(:,2)).^2) - 1.0</code> which results in a unit-circle about the origin (0,0).</li>
      </ul>
    </li>
  </ul>

</div>

<h3 id="nodeedge-selection">Node/Edge selection</h3>

<h3 id="hyper-elastic-material-presets">Hyper-elastic material presets</h3>

<hr />

<h1 id="dynamic-modeling--modelm">Dynamic Modeling â€“ <code class="language-plaintext text-purple-000 highlighter-rouge">Model.m</code></h1>

<p>bla</p>

<hr />

<h1 id="graphical-models--gmodelm">Graphical models â€“ <code class="language-plaintext text-purple-000 highlighter-rouge">Gmodel.m</code></h1>

<h3 id="graphical-material-presets">Graphical material presets</h3>

<hr />

<h1 id="ik-rigging--rigm">IK-rigging â€“ <code class="language-plaintext text-purple-000 highlighter-rouge">Rig.m</code></h1>

<p>bla</p>

<hr />

<h1 id="plotting-tools">Plotting tools</h1>
<div class="code-example">
  <h2 class="no_toc" id="x--colk-varargin"><code class="language-plaintext fs-6 text-purple-000 text-alpha highlighter-rouge">X = col(k, varargin)</code></h2>
  <ul>
    <li><code class="language-plaintext text-red-000 highlighter-rouge">Function</code> â€“  Returns <code class="language-plaintext highlighter-rouge">X = [3x1 ColorRow]</code> given the index <code class="language-plaintext highlighter-rouge">k</code>.
      <ul>
        <li><code class="language-plaintext text-blue-000 highlighter-rouge">k</code> â€“ <code class="language-plaintext highlighter-rouge">[integer]</code> ranging from <code class="language-plaintext highlighter-rouge">1</code> to <code class="language-plaintext highlighter-rouge">12</code>.</li>
        <li><code class="language-plaintext text-blue-000 highlighter-rouge">varargin</code> â€“ <code class="language-plaintext highlighter-rouge">[float]</code> over-expose parameter ranging from <code class="language-plaintext highlighter-rouge">0</code> to <code class="language-plaintext highlighter-rouge">1</code>, default is <code class="language-plaintext highlighter-rouge">0</code>.</li>
      </ul>
    </li>
  </ul>
</div>

<div class="code-example">
  <h2 class="no_toc" id="backgroundcolor"><code class="language-plaintext fs-6 text-purple-000 text-alpha highlighter-rouge">background(color)</code></h2>
  <ul>
    <li><code class="language-plaintext text-red-000 highlighter-rouge">Function</code> â€“  Sets figures background color
      <ul>
        <li><code class="language-plaintext text-blue-000 highlighter-rouge">color</code> â€“ <code class="language-plaintext highlighter-rouge">'w'</code>, <code class="language-plaintext highlighter-rouge">'b'</code>, <code class="language-plaintext highlighter-rouge">gitpage</code>, <code class="language-plaintext highlighter-rouge">metropolis</code></li>
      </ul>
    </li>
  </ul>
</div>

<hr />

<hr />
:ET